# -*- coding: utf-8 -*-
"""Vegetable Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kGKAKMqtFTszDQ26txkX2uHB6YWc2lxv

# Vegetables Classification

## Import Library
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow import keras
from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, BatchNormalization, Dropout ,GlobalAveragePooling2D
from keras.models import Sequential
from keras.preprocessing import image
from keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications import VGG16, EfficientNetB0
from sklearn.metrics import confusion_matrix,classification_report
import os, shutil
import warnings
warnings.filterwarnings('ignore')

"""## Download Dataset"""

!pip install -q opendatasets

import opendatasets as od

od.download('https://www.kaggle.com/datasets/misrakahmed/vegetable-image-dataset')

train_data = "/content/vegetable-image-dataset/Vegetable Images/train"
validation_data = "/content/vegetable-image-dataset/Vegetable Images/validation"

"""## Augmentasi Gambar"""

train_gen = ImageDataGenerator( featurewise_center=False,
                                samplewise_center=False,
                                featurewise_std_normalization=False,
                                samplewise_std_normalization=False,
                                zca_whitening=False,
                                rotation_range=10,
                                zoom_range = 0.1,
                                width_shift_range=0.2,
                                height_shift_range=0.2,
                                horizontal_flip=True,
                                vertical_flip=False,
                              )

train_image_generator = train_gen.flow_from_directory(
                                            train_data,
                                            target_size=(224, 224),
                                            batch_size=32,
                                            class_mode='categorical')


val_gen = ImageDataGenerator()
val_image_generator = val_gen.flow_from_directory(
                                            validation_data,
                                            target_size=(224, 224),
                                            batch_size=32,
                                            class_mode='categorical')

"""## Transfer Learning"""

base_model = EfficientNetB0(weights='imagenet', include_top=False, input_shape=(224, 224, 3))

# Freeze the base model layers
base_model.trainable = False

"""## CNN Model"""

learning_rate = 0.001
dropout_rate = 0.5
dense_rate = 128

model = tf.keras.models.Sequential([
      base_model,
      GlobalAveragePooling2D(),
      Dense(dense_rate, activation='relu'),
      Dropout(dropout_rate),
      Dense(15, activation='softmax')  # Adjust 15 for your number of classes
      ])

model.compile(optimizer=keras.optimizers.Adam(learning_rate=learning_rate),
              loss='categorical_crossentropy',
              metrics=['accuracy'])

"""## Callback"""

checkpoint = keras.callbacks.ModelCheckpoint(
             'efficinentB0_best.h5',
             save_best_only=True,
             monitor='val_accuracy',
             mode='max')

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy')>0.99 and logs.get('val_accuracy')>0.99):
      print("accuracy > 99% skala data")
      self.model.stop_training = True
callbacks = myCallback()

early_stopping = keras.callbacks.EarlyStopping(patience=3,monitor='val_loss',restore_best_weights=True)

"""## Model Train"""

history = model.fit(train_image_generator,
                    validation_data=val_image_generator,
                    epochs=10,
                    callbacks=[checkpoint])

"""## Evaluasi Model"""

model.evaluate(train_image_generator)

model.evaluate(val_image_generator)

pd.DataFrame(history.history).plot()

"""## Testing"""

test_data = "/content/vegetable-image-dataset/Vegetable Images/test"

test_gen = ImageDataGenerator()
test_image_generator = test_gen.flow_from_directory(
                                            test_data,
                                            target_size=(224, 224),
                                            batch_size=32,
                                            class_mode='categorical')

model = keras.models.load_model('/content/efficinentB0_best.h5')

model.evaluate(test_image_generator)

from tensorflow.keras.preprocessing.image import load_img

image_path = '/content/vegetable-image-dataset/Vegetable Images/test/Tomato/1004.jpg'
image = load_img(image_path, target_size = (224, 224))
x = np.array(image)
X = np.array([x])

from tensorflow.keras.applications.efficientnet import preprocess_input

X = preprocess_input(X)

pred = model.predict(X)
pred

class_labels = ['Bean', 'Bitter_Gourd', 'Bottle_Gourd', 'Brinjal', 'Broccoli', 'Cabbage', 'Capsicum', 'Carrot', 'Cauliflower', 'Cucumber', 'Papaya', 'Potato', 'Pumpkin', 'Radish', 'Tomato']
print("Class Labels:", class_labels)

preds = dict(zip(class_labels, pred[0]))

max_value = max(preds[label] for label in class_labels)
max_label = [label for label in class_labels if preds[label] == max_value]

print(f"Ini adalah buah : {max_label}")

"""## Menyimpan Model"""

import pathlib
# Menyimpan model dalam format SavedModel
export_dir = 'saved_model/'
tf.saved_model.save(model, export_dir)

# Convert SavedModel menjadi vegetable.tflite
converter = tf.lite.TFLiteConverter.from_saved_model(export_dir)
tflite_model = converter.convert()

tflite_model_file = pathlib.Path('vegetable.tflite')
tflite_model_file.write_bytes(tflite_model)

# Commented out IPython magic to ensure Python compatibility.
# %cd /content

!zip -r veg_model.zip saved_model/

from google.colab import files
files.download('veg_model.zip')